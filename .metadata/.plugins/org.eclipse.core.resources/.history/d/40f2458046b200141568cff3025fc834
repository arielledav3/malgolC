package malgol.transform;

import malgol.ast.*;
import malgol.common.LayoutInformation;

public class FrameLayoutVisitor implements ASTVisitor {
	
	private int locals;
	private int outgoing;
	private final LayoutInformation info = new LayoutInformation();
	
	public LayoutInformation getLayoutInformation() {
		return info;
	}

	@Override
	public void visit(BlockStatement s) {
		for(Declaration d : s.getDeclarationList()) {
			locals += d.getType().getByteSize();
			info.putVariableLocation(d, -locals);
		}
		for(Statement s2 : s.getStatementList()) {
			s2.accept(this);
		}
	}

	@Override
	public void visit(AssignmentStatement s) {
		// Do nothing
	}

	@Override
	public void visit(SelectionStatement s) {
		if (!(s.getFalseBranch() instanceof SkipStatement))
			throw new RuntimeException(
					"Not expecting an else during space calculation");
		if (!(s.getTrueBranch() instanceof GotoStatement))
			throw new RuntimeException(
					"Expecting a goto in the true branch during space calculation");
	}

	@Override
	public void visit(WhileStatement s) {
		assert false : "WhileStatement visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(PrintStatement s) {
		// Do nothing
	}

	@Override
	public void visit(SkipStatement s) {
		// Do nothing
	}

	@Override
	public void visit(BinaryExpression e) {
		assert false : "BinaryExpression visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(UnaryExpression e) {
		assert false : "UnaryExpression visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(ArrayExpression e) {
		assert false : "ArrayExpression visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(VariableExpression e) {
		assert false : "VariableExpression visited in FrameLayoutVisitor";
	}
	
	@Override
	public void visit(ConstantExpression e) {
		assert false : "ConstantExpression visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(Declaration d) {
		assert false : "Declaration visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(GotoStatement s) {}

	@Override
	public void visit(OffsetExpression e) {
		assert false : "OffsetExpression visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(DereferenceExpression e) {
		assert false : "DereferenceExpression visited in FrameLayoutVisitor";
	}

	@Override
	public void visit(FunctionDefinition d) {
		outgoing = 8;
		locals = 0;
		int parameterNumber = 0;
		for (Declaration decl : d.getParameters()) {
			parameterNumber++;
			info.putVariableLocation(decl, parameterNumber*4 + 4);
		}
		d.getBody().accept(this);
		info.putFrameSize(d, locals + outgoing);
	}

	@Override
	public void visit(ReturnStatement s) {
		// Do nothing
	}

	@Override
	public void visit(FunctionCallExpression e) {
		outgoing = Math.max(outgoing, e.getArguments().size() * 4);
	}

	@Override
	public void visit(Program p) {
		for(FunctionDefinition f : p.getFunctionList()) {
			f.accept(this);
		}		
	}
}
